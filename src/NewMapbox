import React, { useRef, useEffect, useState } from 'react';
import mapboxgl from '!mapbox-gl'; // eslint-disable-line import/no-webpack-loader-syntax
import 'mapbox-gl/dist/mapbox-gl.css';
import MapboxDirections from '@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions';
import '@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions.css';
import MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';
import io from 'socket.io-client';
import useSwr from 'swr';
import ServerAutoSuggest from './geocoder';
import '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';
import Appbar from './Appbar';

var polyline = require('@mapbox/polyline');

mapboxgl.accessToken = 'pk.eyJ1IjoiaGV0LXBhdGVsIiwiYSI6ImNrb3FxMjQ1cDB4cGsycGw0dHh1Zzc5YnQifQ.Bn3AwbxQpIJbmiDglpZoQA';
const fetcher = (...args) => fetch(...args).then((response) => response.json());

export default function MapBox() {
	const mapContainer = useRef(null);
	const geocoderContainerRef = useRef(null);
	const map = useRef(null);
	const get = useRef(null);
	const [lng, setLng] = useState(72);
	const [lat, setLat] = useState(23.052287999999997);
	const [zoom, setZoom] = useState(15);
	const [data, setData] = useState([]);
	const [current, setCurrent] = useState(null);
	const ENDPOINT = 'http://localhost:5000/';
	const socket = io(ENDPOINT);

	const url =
		'https://api.data.gov.in/resource/0dfebd78-bac4-44be-9291-025a983323f4?api-key=579b464db66ec23bdd000001a291f79cd51847996d1e0293329075f4&format=json&offset=0&limit=10000&filters[state_name]=Gujarat';

	const getData = async () => {
		await fetch(url)
			.then((response) => {
				return response.json();
			})
			.then((data) => setData(data.records));
		const points = data.map((hospital) => ({
			type: 'Feature',
			properties: {
				cluster: false,
				hospitalId: hospital.srno,
				state: hospital.state_name,
				name: hospital.health_facility_name,
				city: hospital.block_name,
			},
			geometry: {
				type: 'Point',
				coordinates: [parseFloat(hospital.longitude), parseFloat(hospital.latitude)],
			},
		}));
	};

	const directions = new MapboxDirections({
		accessToken: mapboxgl.accessToken,
		unit: 'metric',
		profile: 'mapbox/driving',
	});
	var geocoder = new MapboxGeocoder({
		accessToken: mapboxgl.accessToken,
		mapboxgl: mapboxgl,
		placeholder: 'From',
	});
	const getPosition = async () => {
		await navigator.geolocation.getCurrentPosition(function (position) {
			map.current.flyTo({
				center: [position.coords.longitude, position.coords.latitude],
				essential: true, // this animation is considered essential with respect to prefers-reduced-motion
			});
			var el = document.createElement('div');
			el.className = 'marker';
			new mapboxgl.Marker(el)
				.setLngLat([position.coords.longitude, position.coords.latitude])
				.setPopup(
					new mapboxgl.Popup().setHTML(`<h1>${(position.coords.longitude, position.coords.latitude)}</h1>`)
				)
				.addTo(map.current);
		});
	};
	useEffect(() => {
		socket.on('marker', (data) => {
			setCurrent(data);
			console.log(data);
		});
	}, []);
	var marker = new mapboxgl.Marker();
	useEffect(() => {
		if (current != null) {
			marker.remove();
			marker.setLngLat([current.lng, current.lat]);
			marker.addTo(map.current);
		}
	}, [current]);

	useEffect(() => {
		getData();

		if (map.current) return; // initialize map only once
		map.current = new mapboxgl.Map({
			container: mapContainer.current,
			style: 'mapbox://styles/het-patel/ckoqqpgp58fmz18plnhruj8ts',
			center: [lng, lat],
			zoom: zoom,
		});

		getPosition();
	}, []);

	useEffect(() => {
		if (!map.current) return; // wait for map to initialize
		map.current.on('move', () => {
			setLng(map.current.getCenter().lng.toFixed(4));
			setLat(map.current.getCenter().lat.toFixed(4));
			setZoom(map.current.getZoom().toFixed(2));
		});
		map.current.on('load', function () {
			map.current.addSource('route', {
				type: 'geojson',
				data: polyline.toGeoJSON(
					'aktoCenwyL~a@ud@du@xK`Kgg@xcIqdA`sQzj@taH}RvnSozFvtEspCdHk~BxvGxc@b`Bip@n`Ez\\rpB{uEryDxo@hkBhpDviTxy@rl@~_Cj{Ax`Adq@xkBxfBnh@|hAi[xCxq@pXAiYdAkCmk@}qAlRyzA_e@et@unBi{Ay`Aum@m~B_nT_y@yxAegDmjDyz@{\\`EunBvoEgyDa^qgBxp@avGwb@}Hh}BwtErpCwnSnzFuaH|RasQ{j@aoJ`hA_y@r|@'
				),
			});

			map.current.addSource('earthquakes', {
				type: 'geojson',
				// Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
				// from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
				data: 'https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson',
				cluster: true,
				clusterMaxZoom: 14, // Max zoom to cluster points on
				clusterRadius: 50, // Radius of each cluster when clustering points (defaults to 50)
			});

			map.current.addLayer({
				id: 'clusters',
				type: 'circle',
				source: 'earthquakes',
				filter: ['has', 'point_count'],
				paint: {
					// Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
					// with three steps to implement three types of circles:
					//   * Blue, 20px circles when point count is less than 100
					//   * Yellow, 30px circles when point count is between 100 and 750
					//   * Pink, 40px circles when point count is greater than or equal to 750
					'circle-color': ['step', ['get', 'point_count'], '#51bbd6', 100, '#f1f075', 750, '#f28cb1'],
					'circle-radius': ['step', ['get', 'point_count'], 20, 100, 30, 750, 40],
				},
			});

			map.current.addLayer({
				id: 'cluster-count',
				type: 'symbol',
				source: 'earthquakes',
				filter: ['has', 'point_count'],
				layout: {
					'text-field': '{point_count_abbreviated}',
					'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
					'text-size': 12,
				},
			});

			map.current.addLayer({
				id: 'unclustered-point',
				type: 'circle',
				source: 'earthquakes',
				filter: ['!', ['has', 'point_count']],
				paint: {
					'circle-color': '#11b4da',
					'circle-radius': 4,
					'circle-stroke-width': 1,
					'circle-stroke-color': '#fff',
				},
			});

			// inspect a cluster on click
			map.current.on('click', 'clusters', function (e) {
				var features = map.current.queryRenderedFeatures(e.point, {
					layers: ['clusters'],
				});
				var clusterId = features[0].properties.cluster_id;
				map.current.getSource('earthquakes').getClusterExpansionZoom(clusterId, function (err, zoom) {
					if (err) return;

					map.current.easeTo({
						center: features[0].geometry.coordinates,
						zoom: zoom,
					});
				});
			});

			// When a click event occurs on a feature in
			// the unclustered-point layer, open a popup at
			// the location of the feature, with
			// description HTML from its properties.
			map.current.on('click', 'unclustered-point', function (e) {
				var coordinates = e.features[0].geometry.coordinates.slice();
				var mag = e.features[0].properties.mag;
				var tsunami;

				if (e.features[0].properties.tsunami === 1) {
					tsunami = 'yes';
				} else {
					tsunami = 'no';
				}

				// Ensure that if the map is zoomed out such that
				// multiple copies of the feature are visible, the
				// popup appears over the copy being pointed to.
				while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
					coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
				}

				new mapboxgl.Popup()
					.setLngLat(coordinates)
					.setHTML('magnitude: ' + mag + '<br>Was there a tsunami?: ' + tsunami)
					.addTo(map);
			});

			map.current.on('mouseenter', 'clusters', function () {
				map.current.getCanvas().style.cursor = 'pointer';
			});
			map.current.on('mouseleave', 'clusters', function () {
				map.current.getCanvas().style.cursor = '';
			});
			map.current.addLayer({
				id: 'route',
				type: 'line',
				source: 'route',
				layout: {
					'line-join': 'round',
					'line-cap': 'round',
				},
				paint: {
					'line-color': 'red',
					'line-width': 5,
				},
			});
		});
	}, []);

	return (
		<div>
			<Appbar map={map} mapboxgl={mapboxgl} lat={lat} lng={lng} getPosition={getPosition} isMap={true} />

			<div ref={mapContainer} className="map-container" />
			<div ref={geocoderContainerRef} className="geocoder" />
		</div>
	);
}
